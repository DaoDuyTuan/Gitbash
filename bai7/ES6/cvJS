class Profiler{
    constructor(){
        this.profile = [];
    }

    set setProfile(profileName){
        this.profile.push(profileName);
    }

    get getProfile(){
        return this.profile;
    }
}

let profileInit = new Profiler();

let checkInfo = (() => {       //lambda in ES6
    
    let flag = true;
    let flagTable = false;
    
    return {
        checkTableTitle: () => {
            return flag = true;
        },
        checkInsertTable: () => {
            return flagTable;
        },
    }
})();

validate = () => {

    let names = document.getElementById("txtname1");
    let fatherName = document.getElementById("txtname1b");
    let motherName = document.getElementById("txtname1m");
    let dob1 = document.getElementById("txtD1");
    let email = document.getElementById("txtE");
    let placeWork = document.getElementById("txtP");
    let soonPhone = document.getElementById("txtN1");
    let motherPhone = document.getElementById("txtNm1");
    let fatherPhone = document.getElementById("txtNb1");
    let nnMe = document.getElementById("txtNN1");
    let nnBo = document.getElementById("txtNN2");
    let male = document.getElementById("male").checked;
    let female = document.getElementById("female").checked;
    let AgeS = document.getElementById("txtA1");
    let AgeF = document.getElementById("txtA2");
    let AgeM = document.getElementById("txtA3");

    // if(names.value.trim()==""){
    //     alert("fullName is empty!");
    //     names.focus();
    //     return ;
    // }
    //
    // if(AgeS.value.trim()==""){
    //     alert("Age is empty!");
    //     AgeS.focus();
    //     return ;
    // }
    // if(dob1.value.trim()==""){
    //     alert("date of birth is empty!");
    //     dob1.focus();
    //     return ;
    // }
    //
    // if(placeWork.value.trim()==""){
    //     alert("placeWork is empty!");
    //     placeWork.focus();
    //     return ;
    // }
    //
    // if(email.value.trim()==""){
    //     alert("email is empty!");
    //     email.focus();
    //     return ;
    // }
    //
    // if(soonPhone.value.trim()==""){
    //     alert("phoneNumber is empty!");
    //     sdt1.focus();
    //     return ;
    // }
    //
    // if(fatherName.value.trim()==""){
    //     alert("fullName is empty!");
    //     nameBo.focus();
    //     return ;
    // }
    //
    // if(fatherPhone.value.trim()==""){
    //     alert("phoneNumber is empty!");
    //     sdtBo.focus();
    //     return ;
    // }
    //
    // if(nnBo.value.trim()==""){
    //     alert("Fother's job is empty!");
    //     nnBo.focus();
    //     return ;
    // }
    //
    // if(motherName.value.trim()==""){
    //     alert("fullName is empty!");
    //     nameMe.focus();
    //     return ;
    // }
    //
    // if(motherPhone.value.trim()==""){
    //     alert("phoneNumber is empty!");
    //     sdtMe.focus();
    //     return ;
    // }
    //
    // if(nnMe.value.trim()==""){
    //     alert("Mother's job is empty!");
    //     nnMe.focus();
    //     return ;
    // }
    //
    // if(!(male) && !(female)){
    //     alert("Gender is empty!");
    //     nnBo.focus();
    //     return ;
    // }
    //
    // if(AgeF.value.trim()==""){
    //     alert("Age is empty!");
    //     AgeF.focus();
    //     return ;
    // }
    //
    // if(AgeM.value.trim()==""){
    //     alert("Age is empty!");
    //     AgeM.focus();
    //     return ;
    // }
    //
    // if(isNaN(sdt1.value) || isNaN(sdtMe.value) || isNaN(sdtBo.value)) {
    //     alert("phone number must be number!!");
    //     return;
    // }
    //
    // if( sdt1.value.length != 10 && sdt1.value.length != 11   ||
    //     sdtMe.value.length != 10 && sdtMe.value.length   != 11 ||
    //     sdtBo.value.length != 10 && sdtBo.value.length != 11 ){
    //     alert( "phone number must have length equal 10 or 11");
    //     return;
    // }
    //
    // if(!(parseInt(AgeS.value) >= 16 && parseInt(AgeS.value) <= 40) ||
    //     !(parseInt(AgeF.value) >= 16 && parseInt(AgeF.value) <= 40) ||
    //     !(parseInt(AgeM.value) >= 16 && parseInt(AgeM.value) <= 40)){
    //     alert("Age is not less 16 and greater 40!");
    //     return ;
    // }

    function profile(_fullName, _sex, _dob, _age, mobile) {
        this.name = _fullName;
        this.phoneNumber = mobile;
        this.sex = _sex;
        this.age = _age;
        this.birthday = _dob;
    }

    const gender = document.querySelector('input[name = "gender"]:checked').value;
    const profile1 = new profile(names.value, gender, dob1.value, AgeS.value, soonPhone.value);

    profileInit.setProfile = profile1;
    checkInfo.checkInsertTable = true;

    alert("Successful!");
}

deleteTable = (table) => {
    let rowTables = table.getElementsByTagName('tr');
    let rowCounts = rowTables.length;

    for (let i = rowCounts - 1; i > 0; i--) {
        table.removeChild(rowTables[i]);
    }
}

show = () => {
    if (checkInfo.checkInsertTable && profileInit.getProfile.length > 0) {

        if (checkInfo.checkTableTitle) {
            const table = document.createElement("table");
            table.setAttribute("id", "you_like");
            const locationAddTable = document.getElementById("showAll");
            locationAddTable.appendChild(table);

            const tr = document.createElement("tr");
            tr.setAttribute("id", "tr");
            const trParent = document.getElementById("you_like");
            trParent.appendChild(tr);

            const tdParent = document.getElementById("tr");

            const td1 = document.createElement("th");
            const textTd1 = document.createTextNode("FullName");
            td1.appendChild(textTd1);
            tdParent.appendChild(td1);

            const td2 = document.createElement("th");
            const textTd2 = document.createTextNode("Gender");
            td2.appendChild(textTd2);
            tdParent.appendChild(td2);

            const td3 = document.createElement("th");
            const textTd3 = document.createTextNode("Date of Birth");
            td3.appendChild(textTd3);
            tdParent.appendChild(td3);

            const td4 = document.createElement("th");
            const textTd4 = document.createTextNode("Age");
            td4.appendChild(textTd4);
            tdParent.appendChild(td4);

            const td5 = document.createElement("th");
            const textTd5 = document.createTextNode("PhoneNumber");
            td5.appendChild(textTd5);
            tdParent.appendChild(td5);

            checkInfo.checkTableTitle= false;

        }

        //Refresh table before add new.
        if (!checkInfo.checkTableTitle) {
            let getTableID = document.getElementById('you_like');
            deleteTable(getTableID );
        }

        // sort but not change original array and copy into new array.
        let copyArray = profileInit.getProfile.slice().sort((a, b) => {
            return a.age - b.age;
        });

        // initialize Map
        let myMap = new Map();

        //add [key,value] for Map.
        for (let i = 0; i < copyArray.length; i++) {
            myMap.set(copyArray[i].phoneNumber, copyArray[i]);
        }

        for (let values of myMap.values()) {

            let table = document.getElementById('you_like');
            let row = table.insertRow(-1);
            let cell0 = row.insertCell(0);
            let cell1 = row.insertCell(1);
            let cell2 = row.insertCell(2);
            let cell3 = row.insertCell(3);
            let cell4 = row.insertCell(4);

            cell0.innerHTML = values.name;
            cell1.innerHTML = values.sex;
            cell2.innerHTML = values.birthday;
            cell3.innerHTML = values.age;
            cell4.innerHTML = values.phoneNumber;

            checkInfo.checkInsertTable = false;
        }

    } else {
        alert("You have not new information!");
    }
}
